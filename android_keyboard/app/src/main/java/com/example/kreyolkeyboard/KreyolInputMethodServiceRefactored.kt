package com.example.kreyolkeyboard

/**
 * √Ä la m√©moire de mon p√®re, Saint-Ange Corneille Famibelle
 */

import android.inputmethodservice.InputMethodService
import android.content.Context
import android.app.ActivityManager
import android.util.Log
import android.view.View
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.HorizontalScrollView
import android.widget.Button
import android.graphics.Color
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputMethodManager
import android.view.KeyEvent
import kotlinx.coroutines.*
import android.os.Handler
import android.os.Looper
import java.util.Timer
import java.util.TimerTask
import com.example.kreyolkeyboard.BilingualSuggestion
import com.example.kreyolkeyboard.SuggestionLanguage
import com.example.kreyolkeyboard.gamification.CreoleDictionaryWithUsage
import com.example.kreyolkeyboard.gamification.WordCommitListener

/**
 * Service principal du clavier cr√©ole refactoris√©
 * Version modulaire utilisant des composants s√©par√©s pour une meilleure maintenabilit√©
 */
class KreyolInputMethodServiceRefactored : InputMethodService(),
    KeyboardLayoutManager.KeyboardInteractionListener,
    SuggestionEngine.SuggestionListener,
    AccentHandler.AccentSelectionListener,
    InputProcessor.InputProcessorListener {
    
    companion object {
        private const val TAG = "LuxemburgIME"
        private const val MAX_SUGGESTIONS = 3  // üîß Retour √† 3 suggestions (couleurs d'origine)
        
        // üîß FIX SAMSUNG A21S: D√©tection appareils low-end
        private fun isLowEndDevice(context: Context): Boolean {
            val activityManager = context.getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
            return activityManager.isLowRamDevice || 
                   activityManager.memoryClass <= 256 // 256MB ou moins = low-end
        }
    }
    
    // Composants modulaires
    private lateinit var keyboardLayoutManager: KeyboardLayoutManager
    private lateinit var suggestionEngine: SuggestionEngine
    private lateinit var accentHandler: AccentHandler
    private lateinit var inputProcessor: InputProcessor
    
    // üéÆ Gamification: Tracking d'utilisation du vocabulaire
    private lateinit var dictionaryWithUsage: CreoleDictionaryWithUsage
    
    // Vues principales
    private var suggestionsView: LinearLayout? = null
    private var mainKeyboardView: View? = null
    
    // √âtat du service
    private var isInitialized = false
    
    // üîß FIX SAMSUNG A21S: Gestion coroutines li√©es au cycle de vie
    private val serviceScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    
    // üîç MONITORING M√âMOIRE A21S
    private var memoryMonitoringJob: Job? = null
    private var lastMemoryWarning = 0L
    
    // Gestion suppression par mots (appui long Delete)
    private var deleteTimer: Timer? = null
    private var deleteHandler = Handler(Looper.getMainLooper())
    private var isDeleteLongPressActive = false
    
    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "=== KREYOL IME SERVICE REFACTORIS√â onCreate() ===")
        
        // üîç DIAGNOSTIC SAMSUNG A21S: Informations syst√®me d√©taill√©es
        logSystemInfo()
        
        try {
            initializeComponents()
            Log.d(TAG, "‚úÖ Service initialis√© avec succ√®s")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå ERREUR CRITIQUE lors de l'initialisation: ${e.message}", e)
            // Log stack trace compl√®te pour A21s debugging
            Log.e(TAG, "Stack trace compl√®te:", e)
        }
    }
    
    /**
     * üîç DIAGNOSTIC A21S: Log des informations syst√®me pour debugging
     */
    private fun logSystemInfo() {
        try {
            val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            val memInfo = ActivityManager.MemoryInfo()
            activityManager.getMemoryInfo(memInfo)
            
            Log.d(TAG, "üìä DIAGNOSTIC SYST√àME A21S:")
            Log.d(TAG, "  ‚Ä¢ RAM totale: ${memInfo.totalMem / (1024 * 1024)}MB")
            Log.d(TAG, "  ‚Ä¢ RAM disponible: ${memInfo.availMem / (1024 * 1024)}MB")
            Log.d(TAG, "  ‚Ä¢ Seuil low memory: ${memInfo.threshold / (1024 * 1024)}MB")
            Log.d(TAG, "  ‚Ä¢ Low RAM device: ${activityManager.isLowRamDevice}")
            Log.d(TAG, "  ‚Ä¢ Memory class: ${activityManager.memoryClass}MB")
            Log.d(TAG, "  ‚Ä¢ Large memory class: ${activityManager.largeMemoryClass}MB")
            
            // Informations Android
            Log.d(TAG, "  ‚Ä¢ Android SDK: ${android.os.Build.VERSION.SDK_INT}")
            Log.d(TAG, "  ‚Ä¢ Model: ${android.os.Build.MODEL}")
            Log.d(TAG, "  ‚Ä¢ Manufacturer: ${android.os.Build.MANUFACTURER}")
            Log.d(TAG, "  ‚Ä¢ Device: ${android.os.Build.DEVICE}")
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur diagnostic syst√®me: ${e.message}", e)
        }
    }
    
    /**
     * üîç MONITORING M√âMOIRE A21S: Surveillance continue pour d√©tecter les fuites
     */
    private fun startMemoryMonitoring() {
        memoryMonitoringJob = serviceScope.launch {
            while (isActive) {
                try {
                    val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
                    val memInfo = ActivityManager.MemoryInfo()
                    activityManager.getMemoryInfo(memInfo)
                    
                    val availableMB = memInfo.availMem / (1024 * 1024)
                    val lowMemThresholdMB = memInfo.threshold / (1024 * 1024)
                    
                    // Alerter si m√©moire critique (seulement toutes les 30 secondes)
                    val now = System.currentTimeMillis()
                    if (availableMB < lowMemThresholdMB && (now - lastMemoryWarning) > 30000) {
                        Log.w(TAG, "‚ö†Ô∏è A21S M√âMOIRE CRITIQUE: ${availableMB}MB disponible (seuil: ${lowMemThresholdMB}MB)")
                        lastMemoryWarning = now
                        
                        // Suggestion de nettoyage sur A21s
                        System.gc()
                        Log.d(TAG, "üîß Garbage collection forc√© pour A21s")
                    }
                    
                    delay(10000) // V√©rifier toutes les 10 secondes
                } catch (e: Exception) {
                    Log.e(TAG, "Erreur monitoring m√©moire A21s: ${e.message}", e)
                    delay(30000) // En cas d'erreur, attendre plus longtemps
                }
            }
        }
    }
    
    /**
     * Initialise tous les composants modulaires
     * üîß FIX SAMSUNG A21S: Initialisation adaptative selon les capacit√©s de l'appareil
     */
    private fun initializeComponents() {
        val isLowEnd = isLowEndDevice(this)
        Log.d(TAG, if (isLowEnd) "üîß Appareil d√©tect√©: Low-end (A21s compatible)" else "üöÄ Appareil d√©tect√©: Standard")
        
        // Cr√©er les gestionnaires
        keyboardLayoutManager = KeyboardLayoutManager(this).apply {
            setInteractionListener(this@KreyolInputMethodServiceRefactored)
        }
        
        suggestionEngine = SuggestionEngine(this).apply {
            setSuggestionListener(this@KreyolInputMethodServiceRefactored)
        }
        
        accentHandler = AccentHandler(this).apply {
            setAccentSelectionListener(this@KreyolInputMethodServiceRefactored)
        }
        
        inputProcessor = InputProcessor(this).apply {
            setInputProcessorListener(this@KreyolInputMethodServiceRefactored)
        }
        
        // üéÆ Gamification: Initialiser le tracking d'utilisation du vocabulaire
        dictionaryWithUsage = CreoleDictionaryWithUsage(this)
        
        // Connecter le listener de tracking au InputProcessor
        inputProcessor.setWordCommitListener(object : WordCommitListener {
            override fun onWordCommitted(word: String) {
                Log.d(TAG, "üîç onWordCommitted appel√© avec: '$word'")
                
                // Tracker le mot dans le dictionnaire (seulement si pr√©sent)
                val tracked = dictionaryWithUsage.incrementWordUsage(word)
                Log.d(TAG, "üéØ R√©sultat tracking '$word': $tracked")
                
                if (tracked) {
                    Log.d(TAG, "üéÆ Gamification: Mot track√© '$word'")
                    
                    // Log des stats pour debug
                    val stats = dictionaryWithUsage.getVocabularyStats()
                    Log.d(TAG, "üìä Coverage: ${String.format("%.1f", stats.coveragePercentage)}% (${stats.wordsDiscovered}/${stats.totalWords} mots)")
                }
            }
        })
        
        Log.d(TAG, "‚úÖ Gamification initialis√©e avec tracking du vocabulaire")
        
        // üîß FIX SAMSUNG A21S: Initialisation adaptative selon les capacit√©s
        serviceScope.launch {
            try {
                if (isLowEnd) {
                    // Sur A21s: Initialisation graduelle pour √©viter les pics de m√©moire
                    Log.d(TAG, "üîß Initialisation optimis√©e A21s - Chargement graduel")
                    delay(500) // Laisser le service se stabiliser
                    suggestionEngine.initialize()
                    delay(200) // Pause entre les √©tapes
                } else {
                    // Appareils standard: Initialisation normale
                    suggestionEngine.initialize()
                }
                isInitialized = true
                Log.d(TAG, "‚úÖ Moteur de suggestions initialis√© (mode: ${if (isLowEnd) "A21s optimis√©" else "standard"})")
                
                // üéØ NOUVEAU: Tests AccentTolerantMatching
                runAccentTolerantTests()
                
                // üéØ D√âSACTIV√â TEMPORAIREMENT: Support bilingue (retour couleurs d'origine)
                // suggestionEngine.enableBilingualSupport()
                Log.d(TAG, "üéØ Mode suggestions avec AccentTolerantMatching activ√©")
                
                // D√©marrer monitoring m√©moire sur A21s
                if (isLowEnd) {
                    startMemoryMonitoring()
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur initialisation suggestions: ${e.message}", e)
                // Sur A21s, r√©essayer avec un mode plus conservateur
                if (isLowEnd && !isInitialized) {
                    Log.d(TAG, "üîß Tentative de r√©cup√©ration pour A21s...")
                    delay(1000)
                    try {
                        suggestionEngine.initialize()
                        isInitialized = true
                        suggestionEngine.enableBilingualSupport()
                        Log.d(TAG, "‚úÖ R√©cup√©ration A21s r√©ussie + support bilingue activ√©")
                    } catch (e2: Exception) {
                        Log.e(TAG, "‚ùå √âchec r√©cup√©ration A21s: ${e2.message}", e2)
                    }
                }
            }
        }
    }
    
    override fun onCreateInputView(): View? {
        Log.d(TAG, "onCreateInputView() appel√©e")
        
        // üÖ∞Ô∏è FORCER LE MODE ALPHAB√âTIQUE AU D√âMARRAGE
        keyboardLayoutManager.forceAlphabeticMode()
        Log.d(TAG, "‚úÖ Mode alphab√©tique forc√© lors de la cr√©ation du clavier")
        
        val mainLayout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setBackgroundColor(Color.parseColor("#F5F5F5"))
        }
        
        // Cr√©er la zone de suggestions
        createSuggestionsArea(mainLayout)
        
        // üì± PADDING ADAPTATIF SELON MODE DE NAVIGATION
        // Cr√©er un conteneur avec padding pour √©viter que la navigation bar masque le clavier
        val keyboardContainer = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            val adaptivePadding = getAdaptiveNavigationPadding()
            setPadding(0, 0, 0, adaptivePadding)
            Log.d(TAG, "‚úÖ Padding adaptatif appliqu√©: ${adaptivePadding}px")
        }
        
        // Cr√©er le clavier principal
        val keyboardLayout = keyboardLayoutManager.createKeyboardLayout()
        keyboardContainer.addView(keyboardLayout)
        mainLayout.addView(keyboardContainer)
        mainKeyboardView = keyboardContainer
        
        return mainLayout
    }
    
    /**
     * Cr√©e la zone des suggestions
     */
    private fun createSuggestionsArea(parentLayout: LinearLayout) {
        val suggestionsContainer = HorizontalScrollView(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                dpToPx(48)
            )
            setBackgroundColor(Color.parseColor("#FFFFFF"))
            setPadding(dpToPx(8), dpToPx(4), dpToPx(8), dpToPx(4))
        }
        
        suggestionsView = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT,
                ViewGroup.LayoutParams.MATCH_PARENT
            )
        }
        
        suggestionsContainer.addView(suggestionsView)
        parentLayout.addView(suggestionsContainer)
    }
    
    // ===== IMPL√âMENTATION KeyboardInteractionListener =====
    
    override fun onKeyPress(key: String) {
        Log.d(TAG, "=== TOUCHE PRESS√âE: '$key' ===")
        
        // üåê BOUTON GLOBE - TEMPORAIREMENT D√âSACTIV√â (bug syst√®me Android)
        // TODO: R√©activer quand le probl√®me syst√®me sera r√©solu
        /*
        if (key == "üåê") {
            Log.d(TAG, "üåê BOUTON GLOBE D√âTECT√â - INTERCEPTION DIRECTE!")
            try {
                val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                inputMethodManager.showInputMethodPicker()
                Log.d(TAG, "‚úÖ Globe intercept√© avec succ√®s: InputMethod Picker affich√©")
                return // Arr√™ter ici pour √©viter le traitement normal qui cause le crash
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors de l'interception du bouton Globe: ${e.message}", e)
                return // M√™me en cas d'erreur, ne pas continuer pour √©viter le crash
            }
        }
        */
        
        if (accentHandler.isLongPressActive()) {
            Log.d(TAG, "Appui long actif - ignorer l'appui court")
            return
        }
        
        Log.d(TAG, "InputProcessor initialis√©: ${::inputProcessor.isInitialized}")
        Log.d(TAG, "Traitement de la touche par InputProcessor")
        inputProcessor.processKeyPress(key)
        Log.d(TAG, "=== FIN TRAITEMENT TOUCHE ===")
    }
    
    override fun onLongPress(key: String, button: TextView) {
        Log.d(TAG, "üîó Appui long sur: $key")
        
        when (key) {
            "‚å´" -> {
                // Suppression par mots avec appui long sur Delete
                Log.d(TAG, "üóëÔ∏è D√©marrage suppression par mots (Delete)")
                startWordDeletion()
            }
            " " -> {
                // üåê NOUVELLE FEATURE: Changement de clavier avec appui long sur barre d'espace
                Log.d(TAG, "üåê Appui long sur barre d'espace - Changement de clavier")
                
                val shouldSwitch = inputProcessor.processSpaceLongPress()
                if (shouldSwitch) {
                    switchToNextKeyboard()
                }
            }
            else -> {
                // Gestion des accents pour les autres touches
                if (accentHandler.hasAccents(key)) {
                    accentHandler.startLongPressTimer(key, button)
                }
            }
        }
    }
    
    override fun onKeyRelease() {
        // Arr√™ter la suppression par mots si active
        stopWordDeletion()
        
        // Arr√™ter les accents
        accentHandler.cancelLongPress()
    }
    
    // ===== IMPL√âMENTATION SuggestionListener =====
    
    override fun onSuggestionsReady(suggestions: List<String>) {
        // üìù RETOUR AUX SUGGESTIONS SIMPLES - Couleurs d'origine
        Log.d(TAG, "üìù Affichage suggestions simples: ${suggestions.joinToString(", ")}")
        displaySuggestions(suggestions)
    }
    
    override fun onBilingualSuggestionsReady(suggestions: List<BilingualSuggestion>) {
        // üîÑ D√âSACTIV√â: Mode bilingue temporairement d√©sactiv√© (retour couleurs d'origine)
        Log.d(TAG, "üîÑ Mode bilingue d√©sactiv√© - utilisation suggestions simples")
    }
    
    override fun onDictionaryLoaded(wordCount: Int) {
        Log.d(TAG, "üü¢ Dictionnaire krey√≤l charg√©: $wordCount mots")
    }
    
    override fun onFrenchDictionaryLoaded(wordCount: Int) {
        Log.d(TAG, "üîµ Dictionnaire fran√ßais charg√©: $wordCount mots")
    }
    
    override fun onNgramModelLoaded() {
        Log.d(TAG, "üü¢ Mod√®le N-gram krey√≤l charg√©")
    }
    
    override fun onModeChanged(newMode: SuggestionEngine.SuggestionMode) {
        Log.d(TAG, "Mode de suggestion chang√©: $newMode")
        // Ici on pourrait mettre √† jour l'interface si n√©cessaire
    }
    
    // ===== IMPL√âMENTATION AccentSelectionListener =====
    
    override fun onAccentSelected(accent: String, baseCharacter: String) {
        Log.d(TAG, "üéØ onAccentSelected appel√© - accent: '$accent', base: '$baseCharacter'")
        
        val inputConnection = currentInputConnection
        if (inputConnection != null) {
            val textBefore = inputConnection.getTextBeforeCursor(10, 0)?.toString() ?: ""
            Log.d(TAG, "üìù Texte avant accent: '$textBefore'")
            
            // ‚úÖ BUG FIX CORRECT: Ajouter l'accent directement 
            // Le caract√®re de base n'a pas √©t√© ajout√© √† cause de l'appui long
            inputConnection.commitText(accent, 1)
            Log.d(TAG, "‚úÖ Accent '$accent' ajout√© (remplace '$baseCharacter' conceptuel)")
            
            // Mettre √† jour le mot courant en ajoutant l'accent
            val currentWord = inputProcessor.getCurrentWord()
            val updatedWord = currentWord + accent
            inputProcessor.updateCurrentWordSilently(updatedWord)
            Log.d(TAG, "‚úÖ Mot mis √† jour: '$currentWord' + '$accent' ‚Üí '$updatedWord'")
            
            // üîç DIAGNOSTIC: V√©rifier l'√©tat final
            val textAfter = inputConnection.getTextBeforeCursor(10, 0)?.toString() ?: ""
            Log.d(TAG, "üìù Texte apr√®s accent: '$textAfter'")
        }
        
        Log.d(TAG, "‚úÖ onAccentSelected termin√© - BUG FIX v2 appliqu√©")
    }
    
    override fun onLongPressStarted(baseKey: String) {
        Log.d(TAG, "Appui long d√©marr√© pour: $baseKey")
    }
    
    override fun onLongPressCancelled() {
        Log.d(TAG, "Appui long annul√©")
    }
    
    // ===== IMPL√âMENTATION InputProcessorListener =====
    
    override fun onWordChanged(word: String) {
        Log.d(TAG, "onWordChanged appel√© avec: '$word'")
        if (word.isNotEmpty() && isInitialized) {
            Log.d(TAG, "ÔøΩ G√©n√©ration suggestions SIMPLES pour: '$word'")
            suggestionEngine.setSuggestionMode(SuggestionEngine.SuggestionMode.DICTIONARY)
            suggestionEngine.generateDictionarySuggestions(word)  // Retour m√©thode simple
        } else {
            Log.d(TAG, "Affichage de suggestions vides (mot vide ou non initialis√©)")
            displaySuggestions(emptyList())
        }
    }
    
    override fun onWordCompleted(word: String) {
        Log.d(TAG, "Mot compl√©t√©: '$word' - Ajout √† l'historique")
        suggestionEngine.addWordToHistory(word)
        
        // üîß FIX SAMSUNG A21S: Utiliser serviceScope et r√©duire le d√©lai
        serviceScope.launch {
            delay(100) // D√©lai r√©duit pour A21s (performance limit√©e)
            Log.d(TAG, "G√©n√©ration suggestions contextuelles apr√®s '$word'")
            suggestionEngine.setSuggestionMode(SuggestionEngine.SuggestionMode.CONTEXTUAL)
            suggestionEngine.generateContextualSuggestions()
        }
    }
    
    override fun onModeChanged(isNumeric: Boolean, isCapital: Boolean, isCapsLock: Boolean) {
        Log.e("SHIFT_REAL_DEBUG", "üö® onModeChanged CALLED! isCapital=$isCapital, isCapsLock=$isCapsLock")
        
        // ‚úÖ CORRECTION: Mettre √† jour les √©tats AVANT l'affichage
        keyboardLayoutManager.updateKeyboardStates(isNumeric, isCapital, isCapsLock)
        
        // Mettre √† jour l'affichage du clavier
        keyboardLayoutManager.updateKeyboardDisplay()
        
        // Si on change vers le mode num√©rique, recr√©er le layout
        if (keyboardLayoutManager.switchKeyboardMode() != isNumeric) {
            refreshKeyboardLayout()
        }
    }
    
    override fun onSpecialKeyPressed(key: String) {
        Log.d(TAG, "Touche sp√©ciale: $key")
        // Traitement suppl√©mentaire si n√©cessaire
    }
    
    /**
     * Affiche les suggestions dans la barre de suggestions
     */
    private fun displaySuggestions(suggestions: List<String>) {
        Log.d(TAG, "displaySuggestions appel√© avec ${suggestions.size} suggestions: ${suggestions.joinToString(", ")}")
        suggestionsView?.let { container ->
            Log.d(TAG, "Container de suggestions trouv√©, vidage des vues existantes")
            container.removeAllViews()
            
            suggestions.take(MAX_SUGGESTIONS).forEach { suggestion ->
                val suggestionButton = Button(this).apply {
                    text = suggestion
                    textSize = 14f
                    setTextColor(Color.parseColor("#333333"))  // Couleur d'origine
                    setBackgroundColor(Color.parseColor("#E3F2FD"))  // Fond d'origine
                    setPadding(dpToPx(12), dpToPx(6), dpToPx(12), dpToPx(6))
                    
                    layoutParams = LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.MATCH_PARENT
                    ).apply {
                        setMargins(dpToPx(4), 0, dpToPx(4), 0)
                    }
                    
                    setOnClickListener {
                        inputProcessor.processSuggestionSelection(suggestion)
                        
                        // üîß FIX SAMSUNG A21S: R√©duire d√©lai et utiliser serviceScope
                        serviceScope.launch {
                            delay(150) // D√©lai r√©duit pour performance A21s
                            suggestionEngine.setSuggestionMode(SuggestionEngine.SuggestionMode.CONTEXTUAL)
                            suggestionEngine.generateContextualSuggestions()
                        }
                    }
                }
                
                container.addView(suggestionButton)
            }
        }
    }
    
    /**
     * üéØ Affiche les suggestions bilingues avec couleurs (Vert Krey√≤l / Bleu Fran√ßais)
     */
    private fun displayBilingualSuggestions(suggestions: List<BilingualSuggestion>) {
        Log.d(TAG, "displayBilingualSuggestions appel√© avec ${suggestions.size} suggestions bilingues")
        suggestionsView?.let { container ->
            container.removeAllViews()
            
            suggestions.take(MAX_SUGGESTIONS).forEach { bilingualSuggestion ->
                val suggestionButton = Button(this).apply {
                    text = bilingualSuggestion.word
                    textSize = 14f
                    
                    // üé® Couleur selon la langue
                    val textColor = bilingualSuggestion.getColor()
                    setTextColor(textColor)
                    
                    // Debug: V√©rifier la couleur appliqu√©e
                    val colorHex = String.format("#%06X", 0xFFFFFF and textColor)
                    val languageName = when(bilingualSuggestion.language) {
                        SuggestionLanguage.KREYOL -> "KREYOL"
                        SuggestionLanguage.FRENCH -> "FRENCH"
                    }
                    Log.d(TAG, "üé® Bouton '${bilingualSuggestion.word}': $languageName ‚Üí couleur $colorHex")
                    
                    // Fond plus subtil pour mettre en valeur la couleur du texte
                    setBackgroundColor(Color.parseColor("#F8F9FA"))
                    setPadding(dpToPx(12), dpToPx(6), dpToPx(12), dpToPx(6))
                    
                    layoutParams = LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.MATCH_PARENT
                    ).apply {
                        setMargins(dpToPx(4), 0, dpToPx(4), 0)
                    }
                    
                    setOnClickListener {
                        inputProcessor.processSuggestionSelection(bilingualSuggestion.word)
                        
                        // üîß FIX SAMSUNG A21S: Performance optimis√©e
                        serviceScope.launch {
                            delay(150)
                            suggestionEngine.setSuggestionMode(SuggestionEngine.SuggestionMode.CONTEXTUAL)
                            suggestionEngine.generateContextualSuggestions()
                        }
                    }
                }
                
                container.addView(suggestionButton)
            }
            
            Log.d(TAG, "‚úÖ ${suggestions.size} suggestions bilingues affich√©es avec couleurs")
        }
    }

    /**
     * Actualise le layout du clavier en pr√©servant le conteneur avec padding
     */
    private fun refreshKeyboardLayout() {
        mainKeyboardView?.let { containerView ->
            // mainKeyboardView est le conteneur avec padding, pas le clavier directement
            if (containerView is LinearLayout && containerView.childCount > 0) {
                // Retirer l'ancien clavier du conteneur
                val oldKeyboard = containerView.getChildAt(0)
                containerView.removeView(oldKeyboard)
                
                // Cr√©er et ajouter le nouveau clavier dans le m√™me conteneur
                val newKeyboard = keyboardLayoutManager.createKeyboardLayout()
                containerView.addView(newKeyboard)
                
                Log.d(TAG, "üîÑ Clavier actualis√© (padding pr√©serv√©: ${containerView.paddingBottom}px)")
            } else {
                Log.w(TAG, "‚ö†Ô∏è mainKeyboardView n'est pas un conteneur LinearLayout valide")
            }
        }
    }
    
    // ===== M√âTHODES DE CYCLE DE VIE =====
    
    override fun onStartInput(info: EditorInfo?, restarting: Boolean) {
        super.onStartInput(info, restarting)
        Log.d(TAG, "onStartInput - restarting: $restarting")
        
        inputProcessor.resetState()
        suggestionEngine.clearHistory()
        displaySuggestions(emptyList())
    }
    
    override fun onStartInputView(info: EditorInfo?, restarting: Boolean) {
        super.onStartInputView(info, restarting)
        Log.d(TAG, "onStartInputView - restarting: $restarting")
        
        // üÖ∞Ô∏è S'ASSURER QUE LE MODE ALPHAB√âTIQUE EST ACTIF √Ä CHAQUE FOIS
        if (!restarting) {
            keyboardLayoutManager.forceAlphabeticMode()
            keyboardLayoutManager.updateKeyboardDisplay()
            Log.d(TAG, "‚úÖ Mode alphab√©tique garanti lors du d√©marrage de la saisie")
        }
    }
    
    override fun onFinishInput() {
        // üîß FIX: Ne PAS appeler super.onFinishInput() pour garder le clavier actif
        // Cela emp√™che Android de d√©truire le service IME apr√®s un ENTER
        Log.d(TAG, "onFinishInput - Clavier reste actif (super.onFinishInput() non appel√©)")
        
        // Nettoyer seulement l'√©tat local
        accentHandler.dismissAccentPopup()
        inputProcessor.resetState()
    }
    
    /**
     * M√âTHODE TEMPORAIREMENT D√âSACTIV√âE - G√®re le changement vers le prochain clavier IME (bouton Globe üåê)
     * TODO: R√©activer quand le probl√®me syst√®me Android sera r√©solu
     */
    /*
    override fun switchInputMethod(imeSubtypeToken: String?) {
        Log.d(TAG, "üåê switchInputMethod appel√© avec token: $imeSubtypeToken")
        try {
            // M√©thode 1: Utiliser la m√©thode standard du syst√®me
            val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            val token = window.window?.attributes?.token
            
            if (token != null) {
                // Utiliser switchToNextInputMethod avec le bon token de fen√™tre
                val switched = inputMethodManager.switchToNextInputMethod(token, false)
                Log.d(TAG, "‚úÖ switchToNextInputMethod r√©ussi: $switched")
                if (!switched) {
                    // Fallback: afficher le s√©lecteur
                    inputMethodManager.showInputMethodPicker()
                    Log.d(TAG, "‚úÖ Fallback: InputMethod Picker affich√©")
                }
            } else {
                // Si pas de token, utiliser le s√©lecteur directement
                inputMethodManager.showInputMethodPicker()
                Log.d(TAG, "‚úÖ Token null: InputMethod Picker affich√©")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur lors du changement de clavier: ${e.message}", e)
            // Dernier recours: super.switchInputMethod()
            try {
                super.switchInputMethod(imeSubtypeToken)
                Log.d(TAG, "‚úÖ Super.switchInputMethod r√©ussi")
            } catch (superException: Exception) {
                Log.e(TAG, "‚ùå Super.switchInputMethod √©galement √©chou√©: ${superException.message}", superException)
            }
        }
    }
    */
    
    /**
     * M√âTHODE TEMPORAIREMENT D√âSACTIV√âE - Interception directe des touches syst√®me, notamment le bouton Globe
     * TODO: R√©activer quand le probl√®me syst√®me Android sera r√©solu
     */
    /*
    override fun onKeyDown(keyCode: Int, event: KeyEvent): Boolean {
        Log.d(TAG, "üîß onKeyDown appel√© avec keyCode: $keyCode (Globe = ${KeyEvent.KEYCODE_LANGUAGE_SWITCH})")
        
        // Intercepter sp√©cifiquement le bouton Globe
        if (keyCode == KeyEvent.KEYCODE_LANGUAGE_SWITCH) {
            Log.d(TAG, "üåê INTERCEPTION DIRECTE du bouton Globe!")
            try {
                // Utiliser directement InputMethodManager sans passer par switchInputMethod()
                val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                inputMethodManager.showInputMethodPicker()
                Log.d(TAG, "‚úÖ Globe intercept√©: InputMethod Picker affich√© avec succ√®s")
                return true // Consommer l'√©v√©nement pour √©viter le traitement par d√©faut
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors de l'interception Globe: ${e.message}", e)
                return false // Laisser le syst√®me traiter en cas d'erreur
            }
        }
        
        // Pour toutes les autres touches, utiliser le comportement par d√©faut
        return super.onKeyDown(keyCode, event)
    }
    */
    
    override fun onDestroy() {
        Log.d(TAG, "=== DESTRUCTION DU SERVICE ===")
        
        try {
            // üéÆ Gamification: Sauvegarder les changements non sauvegard√©s
            if (::dictionaryWithUsage.isInitialized) {
                dictionaryWithUsage.onDestroy()
                Log.d(TAG, "‚úÖ Gamification: Sauvegarde finale effectu√©e")
            }
            
            // üîß FIX SAMSUNG A21S: Arr√™ter monitoring et annuler coroutines
            memoryMonitoringJob?.cancel()
            serviceScope.cancel()
            Log.d(TAG, "‚úÖ Monitoring m√©moire et coroutines annul√©s pour A21s")
            
            // Arr√™ter la suppression par mots si active
            stopWordDeletion()
            
            // Nettoyage des composants dans l'ordre inverse de cr√©ation
            accentHandler.cleanup()
            // inputProcessor.setInputProcessorListener(null) // √Ä commenter pour √©viter l'erreur
            suggestionEngine.cleanup()
            keyboardLayoutManager.cleanup()
            
            // Nettoyage des vues
            suggestionsView?.removeAllViews()
            suggestionsView = null
            mainKeyboardView = null
            
            Log.d(TAG, "Nettoyage termin√© avec succ√®s - Compatible A21s")
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors du nettoyage: ${e.message}", e)
        } finally {
            super.onDestroy()
        }
    }
    
    // ===== SUPPRESSION PAR MOTS (APPUI LONG DELETE) =====
    
    /**
     * D√©marre la suppression continue par mots avec appui long
     */
    private fun startWordDeletion() {
        if (isDeleteLongPressActive) return
        
        isDeleteLongPressActive = true
        Log.d(TAG, "üî• D√©but suppression par mots avec appui long")
        
        // Premi√®re suppression imm√©diate d'un mot
        deleteWordBeforeCursor()
        
        // Puis suppression continue toutes les 300ms
        deleteTimer = Timer()
        deleteTimer?.scheduleAtFixedRate(object : TimerTask() {
            override fun run() {
                deleteHandler.post {
                    if (isDeleteLongPressActive) {
                        deleteWordBeforeCursor()
                    }
                }
            }
        }, 500, 300) // D√©lai initial 500ms, puis toutes les 300ms
    }
    
    /**
     * Arr√™te la suppression continue par mots
     */
    private fun stopWordDeletion() {
        if (!isDeleteLongPressActive) return
        
        isDeleteLongPressActive = false
        deleteTimer?.cancel()
        deleteTimer = null
        Log.d(TAG, "üõë Arr√™t suppression par mots")
    }
    
    /**
     * Supprime le mot pr√©c√©dent en utilisant les espaces comme d√©limiteurs
     */
    private fun deleteWordBeforeCursor() {
        val inputConnection = currentInputConnection ?: return
        
        try {
            // R√©cup√©rer le texte avant le curseur (jusqu'√† 100 caract√®res)
            val textBeforeCursor = inputConnection.getTextBeforeCursor(100, 0)?.toString() ?: ""
            
            if (textBeforeCursor.isEmpty()) {
                Log.d(TAG, "Aucun texte avant le curseur")
                return
            }
            
            // Trouver le dernier mot (d√©limit√© par des espaces)
            var deleteCount = 0
            var i = textBeforeCursor.length - 1
            
            // Ignorer les espaces en fin
            while (i >= 0 && textBeforeCursor[i].isWhitespace()) {
                deleteCount++
                i--
            }
            
            // Compter les caract√®res du mot
            while (i >= 0 && !textBeforeCursor[i].isWhitespace()) {
                deleteCount++
                i--
            }
            
            if (deleteCount > 0) {
                inputConnection.deleteSurroundingText(deleteCount, 0)
                Log.d(TAG, "üóëÔ∏è Supprim√© $deleteCount caract√®res (mot complet)")
                
                // Optionnel: Le processeur d'entr√©e se mettra √† jour automatiquement
                // via les prochaines interactions utilisateur
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la suppression par mots: ${e.message}")
            // Fallback: suppression caract√®re par caract√®re
            inputConnection.deleteSurroundingText(1, 0)
        }
    }
    
    // ===== CHANGEMENT DE CLAVIER (APPUI LONG BARRE D'ESPACE) =====
    
    /**
     * üåê Change vers le prochain clavier IME disponible
     * Utilis√© lors de l'appui long sur la barre d'espace (pattern UX standard Android)
     * 
     * M√©thode directe : switchToNextInputMethod avec le token de la fen√™tre
     */
    private fun switchToNextKeyboard() {
        try {
            Log.d(TAG, "üåê Changement vers prochain clavier...")
            val inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            
            // Essayer d'abord switchToNextInputMethod
            val token = window.window?.attributes?.token
            if (token != null) {
                val switched = inputMethodManager.switchToNextInputMethod(token, false)
                Log.d(TAG, if (switched) "‚úÖ Changement r√©ussi" else "‚ö†Ô∏è Changement √©chou√©, fallback picker")
                
                if (!switched) {
                    // Fallback: afficher le s√©lecteur
                    inputMethodManager.showInputMethodPicker()
                }
            } else {
                Log.d(TAG, "‚ö†Ô∏è Token null, utilisation picker")
                inputMethodManager.showInputMethodPicker()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur changement clavier: ${e.message}", e)
        }
    }

    // ===== M√âTHODES D'√âVALUATION =====
    
    override fun onEvaluateFullscreenMode(): Boolean {
        return false // Toujours en mode compact pour une meilleure UX
    }
    
    override fun onEvaluateInputViewShown(): Boolean {
        return true
    }
    
    override fun isExtractViewShown(): Boolean {
        return false
    }
    
    // ===== M√âTHODES UTILITAIRES =====
    
    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }
    
    /**
     * üì± D√©tecte le mode de navigation syst√®me actif
     * @return Code du mode: 0=3-button, 1=2-button, 2=Gesture, -1=Unknown
     */
    private fun detectNavigationMode(): Int {
        return try {
            val navigationMode = android.provider.Settings.Secure.getInt(
                contentResolver,
                "navigation_mode",
                0  // 0 par d√©faut (3-button)
            )
            
            val modeName = when (navigationMode) {
                0 -> "3-button navigation"
                1 -> "2-button navigation"
                2 -> "Gesture navigation"
                else -> "Unknown navigation mode"
            }
            
            Log.d(TAG, "üì± Mode de navigation d√©tect√©: $modeName (valeur: $navigationMode)")
            return navigationMode
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erreur d√©tection mode navigation: ${e.message}")
            return -1  // Unknown
        }
    }
    
    /**
     * üìè Calcule le padding bottom adapt√© selon le mode de navigation
     * Utilise la hauteur r√©elle de la navigation bar syst√®me + marge adapt√©e
     * @return Padding en pixels
     */
    private fun getAdaptiveNavigationPadding(): Int {
        val navigationMode = detectNavigationMode()
        
        // Obtenir la hauteur syst√®me de la navigation bar
        val resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android")
        val systemNavBarHeight = if (resourceId > 0) {
            resources.getDimensionPixelSize(resourceId)
        } else {
            (48 * resources.displayMetrics.density).toInt() // Fallback 48dp
        }
        
        val padding = when (navigationMode) {
            0 -> {
                // 3-button navigation: hauteur syst√®me + marge s√©curit√© 12dp
                val marginDp = 12
                val marginPx = (marginDp * resources.displayMetrics.density).toInt()
                val paddingPx = systemNavBarHeight + marginPx
                Log.d(TAG, "üîò 3-button: NavBar ${systemNavBarHeight}px + ${marginDp}dp marge = ${paddingPx}px")
                paddingPx
            }
            1 -> {
                // 2-button navigation: hauteur syst√®me + marge s√©curit√© 8dp
                val marginDp = 8
                val marginPx = (marginDp * resources.displayMetrics.density).toInt()
                val paddingPx = systemNavBarHeight + marginPx
                Log.d(TAG, "üîò 2-button: NavBar ${systemNavBarHeight}px + ${marginDp}dp marge = ${paddingPx}px")
                paddingPx
            }
            2 -> {
                // Gesture navigation: padding minimal 20dp (juste la barre indicateur)
                val paddingDp = 20
                val paddingPx = (paddingDp * resources.displayMetrics.density).toInt()
                Log.d(TAG, "üëÜ Gesture: Padding minimal ${paddingDp}dp = ${paddingPx}px")
                paddingPx
            }
            else -> {
                // Mode inconnu: padding de s√©curit√©
                val paddingDp = 48
                val paddingPx = (paddingDp * resources.displayMetrics.density).toInt()
                Log.d(TAG, "‚ö†Ô∏è Mode inconnu: Padding s√©curit√© ${paddingDp}dp = ${paddingPx}px")
                paddingPx
            }
        }
        
        Log.d(TAG, "‚úÖ Padding adaptatif calcul√©: ${padding}px")
        return padding
    }
    
    /**
     * üß™ Tests AccentTolerantMatching au d√©marrage du clavier
     */
    private fun runAccentTolerantTests() {
        serviceScope.launch {
            try {
                Log.i(TAG, "üß™ Lancement des tests AccentTolerantMatching...")
                
                val testRunner = AccentTolerantMatchingTest(this@KreyolInputMethodServiceRefactored)
                val testsSuccess = testRunner.runAllTests()
                
                if (testsSuccess) {
                    Log.i(TAG, "‚úÖ Tous les tests AccentTolerantMatching r√©ussis!")
                    
                    // Test de performance
                    val perfTime = testRunner.testPerformance()
                    Log.i(TAG, "‚è±Ô∏è Performance OK: ${perfTime}ms pour 100 recherches")
                    
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Certains tests AccentTolerantMatching ont √©chou√© - fonctionnalit√© disponible mais non optimale")
                }
                
                // Tests sp√©cifiques aux cas d'usage cr√©oles
                testCreoleSpecificCases()
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Erreur lors des tests AccentTolerantMatching: ${e.message}", e)
            }
        }
    }
    
    /**
     * Tests sp√©cifiques pour les mots cr√©oles fr√©quents
     */
    private suspend fun testCreoleSpecificCases() {
        try {
            Log.d(TAG, "üîç Test des cas cr√©oles sp√©cifiques...")
            
            val testCases = mapOf(
                "kre" to "kr√©y√≤l",
                "fe" to "f√®", 
                "te" to "t√©",
                "bon" to "bon",
                "epi" to "√©pi",
                "ou" to "o√π"
            )
            
            for ((input, expectedWord) in testCases) {
                // Simuler une recherche de suggestion
                val suggestions = mutableListOf<String>()
                
                // Utiliser un callback temporaire pour capturer les suggestions
                val originalListener = suggestionEngine.getSuggestionListener()
                suggestionEngine.setSuggestionListener(object : SuggestionEngine.SuggestionListener {
                    override fun onSuggestionsReady(newSuggestions: List<String>) {
                        suggestions.addAll(newSuggestions)
                    }
                    override fun onBilingualSuggestionsReady(suggestions: List<BilingualSuggestion>) {}
                    override fun onDictionaryLoaded(wordCount: Int) {}
                    override fun onNgramModelLoaded() {}
                    override fun onFrenchDictionaryLoaded(wordCount: Int) {}
                    override fun onModeChanged(newMode: SuggestionEngine.SuggestionMode) {}
                })
                
                // G√©n√©rer les suggestions
                suggestionEngine.generateSuggestions(input)
                
                // Attendre un peu pour les suggestions asynchrones
                delay(100)
                
                // V√©rifier si le mot attendu est trouv√© (directement ou via normalisation)
                val found = suggestions.any { suggestion ->
                    AccentTolerantMatcher.matches(suggestion, expectedWord) || 
                    suggestion.equals(expectedWord, ignoreCase = true)
                }
                
                if (found) {
                    Log.d(TAG, "‚úÖ '$input' ‚Üí Trouv√© '$expectedWord' dans $suggestions")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è '$input' ‚Üí '$expectedWord' NON trouv√© dans $suggestions")
                }
                
                // Restaurer l'ancien listener
                originalListener?.let { suggestionEngine.setSuggestionListener(it) }
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors des tests cr√©oles sp√©cifiques: ${e.message}", e)
        }
    }
}
