#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üá±üá∫ LUXEMBURGISH KEYBOARD‚Ñ¢ - PIPELINE ULTRA-RAPIDE ET OPTIMIS√â üá±üá∫
======================================================================
Auteur: Medhi Akabi
Version: 1.0 - Version optimis√©e pour la vitesse (ignore compl√®tement l'audio)
Date: 2025-10-21

MISSION:
Pipeline optimis√© pour cr√©er le dictionnaire et les n-grammes luxembourgeois
pour l'int√©gration dans le clavier Android, en ignorant compl√®tement les donn√©es audio.

OPTIMISATIONS:
- Chargement direct sans streaming
- Ignore compl√®tement l'audio
- Traitement rapide des transcriptions uniquement
- Limite √† 500 transcriptions pour la performance
======================================================================
"""

import os
import sys
import json
import re
import time
from datetime import datetime
from collections import Counter, defaultdict
from dotenv import load_dotenv

# Gestion des d√©pendances optionnelles
try:
    from datasets import load_dataset
    HAS_DATASETS = True
    print("‚úÖ Biblioth√®que 'datasets' disponible")
except ImportError:
    HAS_DATASETS = False
    print("‚ùå Biblioth√®que 'datasets' non disponible - mode fallback uniquement")

class LuxembourgishKeyboardPipelineRapide:
    """
    Pipeline optimis√© pour cr√©er le dictionnaire et les n-grammes luxembourgeois
    en mode ultra-rapide sans traitement audio.
    """
    
    def __init__(self):
        self.version = "1.0-RAPIDE"
        self.langue = "Luxembourgish"
        self.textes_luxembourgeois = []
        self.mots_luxembourgeois = set()
        self.dictionnaire_luxembourgeois = {}
        self.ngrams_luxembourgeois = defaultdict(int)
        
        # Configuration des caract√®res luxembourgeois
        self.caracteres_luxembourgeois = set('√§√´√©√∂√ºABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')
        
        print(f"üá±üá∫ LUXEMBURGISH KEYBOARD‚Ñ¢ - PIPELINE ULTRA-RAPIDE üá±üá∫")
        print("=" * 70)
        print(f"Version: {self.version} - Pipeline Luxembourgeois Optimis√©")
        print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("üéØ TRAITEMENT RAPIDE - AUDIO IGNOR√â")
        print("=" * 70)
        
    def charger_textes_luxembourgeois(self):
        """
        Charge les transcriptions luxembourgeoises en mode ultra-rapide.
        Ignore compl√®tement l'audio pour optimiser la vitesse.
        """
        print("\nüìñ CHARGEMENT RAPIDE DES TRANSCRIPTIONS LUXEMBOURGEOISES")
        print("-" * 60)
        
        textes_charges = False
        
        # Tentative Hugging Face optimis√©e
        if HAS_DATASETS:
            try:
                print("üöÄ Mode ultra-rapide: Hugging Face sans audio...")
                print("   üì° Connexion dataset Akabi/Luxemburgish_Press_Conferences_Gov")
                
                # Chargement direct avec limite pour la performance
                print("   ‚ö° Chargement optimis√© (limite 500 transcriptions)...")
                ds = load_dataset("Akabi/Luxemburgish_Press_Conferences_Gov", split="train[:500]")
                
                print(f"   ‚úÖ Dataset charg√©: {len(ds)} entr√©es")
                print("   üìù Extraction transcriptions uniquement...")
                
                self.textes_luxembourgeois = []
                transcriptions_valides = 0
                
                for i, item in enumerate(ds):
                    if "transcription" in item and item["transcription"] and item["transcription"].strip():
                        # Ne jamais acc√©der au champ audio
                        transcription = item["transcription"].strip()
                        if len(transcription) > 10:  # Filtrer les transcriptions trop courtes
                            self.textes_luxembourgeois.append({
                                "Texte": transcription,
                                "Source": "Akabi/Luxemburgish_Press_Conferences_Gov (optimis√©)",
                                "index": i
                            })
                            transcriptions_valides += 1
                    
                    # Affichage de progression
                    if (i + 1) % 100 == 0:
                        print(f"      üìä Trait√© {i + 1}/{len(ds)} entr√©es...")
                
                print(f"   üìà R√©sultats:")
                print(f"      - Entr√©es trait√©es: {len(ds)}")
                print(f"      - Transcriptions valides: {transcriptions_valides}")
                print(f"      - Transcriptions retenues: {len(self.textes_luxembourgeois)}")
                
                # √âchantillon
                if self.textes_luxembourgeois:
                    print("   üî¨ √âchantillon des transcriptions:")
                    for i, texte in enumerate(self.textes_luxembourgeois[:3]):
                        preview = texte["Texte"][:60] + "..." if len(texte["Texte"]) > 60 else texte["Texte"]
                        print(f"      {i+1}: '{preview}'")
                
                if len(self.textes_luxembourgeois) >= 50:  # Seuil minimum
                    print(f"üéâ CHARGEMENT RAPIDE R√âUSSI !")
                    print(f"   ‚úÖ {len(self.textes_luxembourgeois)} transcriptions r√©cup√©r√©es")
                    print("   ‚ö° Mode ultra-rapide - audio ignor√©")
                    textes_charges = True
                else:
                    print("‚ö†Ô∏è DONN√âES INSUFFISANTES - Fallback local...")
                    
            except Exception as e:
                print(f"‚ùå ERREUR HUGGING FACE: {e}")
                print("   üîÑ Passage au fallback local...")
        else:
            print("‚ùå Biblioth√®que 'datasets' non disponible")
            print("   üîÑ Passage au fallback local...")
        
        # Fallback local si n√©cessaire
        if not textes_charges:
            print("\nüîÑ FALLBACK LOCAL RAPIDE")
            print("-" * 40)
            
            # Donn√©es d'exemple luxembourgeoises pour garantir un fonctionnement
            transcriptions_fallback = [
                "D'Regierung huet elo eng wichteg Decisioun geholl fir d'Zukunft vum Land.",
                "Mir w√´llen all Efforte maachen fir de L√´tzebuerger Bierger ze h√´llefen.",
                "D'Educatioun ass eng vun eisen Priorit√©iten fir d√©i n√§chst Joeren.",
                "D'Wirtschaft muss sech adapt√©ieren un d√©i nei Realit√©iten.",
                "Mir sinn houfreg op eist Land an op eis Sprooch.",
                "D'Digitalisatioun spillt eng √´mmer m√©i wichteg Roll an eisem Liewen.",
                "D'Gesondheetsversuergung muss fir jiddereen zoug√§nglech sinn.",
                "D'√ãmwelt ze sch√ºtzen ass eng gemeinsam Verantwortung.",
                "D'Junioun t√´schent de verschiddenen Culturen ass eist St√§rkten.",
                "D'Zukunft vum L√´tzebuerg l√§it an den H√§nn vun eis aller."
            ]
            
            self.textes_luxembourgeois = []
            for i, transcription in enumerate(transcriptions_fallback):
                self.textes_luxembourgeois.append({
                    "Texte": transcription,
                    "Source": "Fallback local luxembourgeois",
                    "index": i
                })
            
            print(f"‚úÖ Fallback activ√©: {len(self.textes_luxembourgeois)} transcriptions")
            textes_charges = True
        
        if textes_charges:
            print(f"\nüéØ CHARGEMENT TERMIN√â")
            print(f"   üìä Total transcriptions: {len(self.textes_luxembourgeois)}")
            return True
        else:
            print("‚ùå √âCHEC COMPLET DU CHARGEMENT")
            return False
    
    def extraire_mots_luxembourgeois(self):
        """Extrait et nettoie les mots luxembourgeois des transcriptions."""
        print("\nüî§ EXTRACTION DES MOTS LUXEMBOURGEOIS")
        print("-" * 45)
        
        if not self.textes_luxembourgeois:
            print("‚ùå Aucune transcription disponible")
            return False
        
        mots_bruts = []
        
        for texte_obj in self.textes_luxembourgeois:
            texte = texte_obj["Texte"]
            
            # Nettoyage et extraction des mots
            texte_nettoye = re.sub(r'[^\w\s√§√´√©√∂√º√Ñ√ã√â√ñ√ú]', ' ', texte)
            mots = texte_nettoye.split()
            
            for mot in mots:
                mot_propre = mot.strip().lower()
                if len(mot_propre) >= 2 and any(c in self.caracteres_luxembourgeois for c in mot_propre):
                    mots_bruts.append(mot_propre)
        
        # Compter les fr√©quences
        compteur_mots = Counter(mots_bruts)
        
        # Filtrer les mots par fr√©quence (minimum 2 occurrences)
        seuil_frequence = 1 if len(compteur_mots) < 1000 else 2
        
        for mot, freq in compteur_mots.items():
            if freq >= seuil_frequence:
                self.mots_luxembourgeois.add(mot)
                self.dictionnaire_luxembourgeois[mot] = freq
        
        print(f"   üìä Mots bruts extraits: {len(mots_bruts)}")
        print(f"   üìä Mots uniques trouv√©s: {len(compteur_mots)}")
        print(f"   üìä Mots retenus (fr√©q >= {seuil_frequence}): {len(self.mots_luxembourgeois)}")
        
        # √âchantillon des mots les plus fr√©quents
        mots_frequents = sorted(self.dictionnaire_luxembourgeois.items(), key=lambda x: x[1], reverse=True)[:10]
        print("   üî¨ Mots les plus fr√©quents:")
        for mot, freq in mots_frequents:
            print(f"      '{mot}' ({freq}x)")
        
        return len(self.mots_luxembourgeois) > 0
    
    def generer_ngrams_luxembourgeois(self):
        """G√©n√®re les n-grammes luxembourgeois pour l'autocompl√©tion."""
        print("\nüîó G√âN√âRATION DES N-GRAMMES LUXEMBOURGEOIS")
        print("-" * 47)
        
        if not self.textes_luxembourgeois:
            print("‚ùå Aucune transcription disponible")
            return False
        
        # G√©n√©ration de bigrammes et trigrammes
        for texte_obj in self.textes_luxembourgeois:
            texte = texte_obj["Texte"].lower()
            mots = re.findall(r'\b\w+\b', texte)
            
            # Bigrammes
            for i in range(len(mots) - 1):
                if len(mots[i]) >= 2 and len(mots[i+1]) >= 2:
                    bigram = f"{mots[i]} {mots[i+1]}"
                    self.ngrams_luxembourgeois[bigram] += 1
            
            # Trigrammes
            for i in range(len(mots) - 2):
                if all(len(mots[i+j]) >= 2 for j in range(3)):
                    trigram = f"{mots[i]} {mots[i+1]} {mots[i+2]}"
                    self.ngrams_luxembourgeois[trigram] += 1
        
        # Filtrer par fr√©quence
        seuil_ngram = 1 if len(self.ngrams_luxembourgeois) < 500 else 2
        ngrams_filtres = {ng: freq for ng, freq in self.ngrams_luxembourgeois.items() if freq >= seuil_ngram}
        self.ngrams_luxembourgeois = ngrams_filtres
        
        print(f"   üìä N-grammes g√©n√©r√©s (fr√©q >= {seuil_ngram}): {len(self.ngrams_luxembourgeois)}")
        
        # √âchantillon des n-grammes les plus fr√©quents
        ngrams_frequents = sorted(self.ngrams_luxembourgeois.items(), key=lambda x: x[1], reverse=True)[:5]
        print("   üî¨ N-grammes les plus fr√©quents:")
        for ngram, freq in ngrams_frequents:
            print(f"      '{ngram}' ({freq}x)")
        
        return len(self.ngrams_luxembourgeois) > 0
    
    def sauvegarder_donnees(self):
        """Sauvegarde le dictionnaire et les n-grammes en JSON dans le dossier Android assets."""
        print("\nüíæ SAUVEGARDE DES DONN√âES ANDROID")
        print("-" * 40)
        
        try:
            # D√©finir le chemin du dossier assets Android
            assets_dir = os.path.join("android_keyboard", "app", "src", "main", "assets")
            
            # V√©rifier et cr√©er le dossier assets si n√©cessaire
            if not os.path.exists(assets_dir):
                print(f"   üìÅ Cr√©ation du dossier: {assets_dir}")
                os.makedirs(assets_dir, exist_ok=True)
            else:
                print(f"   üìÅ Dossier assets trouv√©: {assets_dir}")
            
            # Sauvegarde du dictionnaire dans assets
            dict_file = os.path.join(assets_dir, "luxemburgish_dict.json")
            with open(dict_file, 'w', encoding='utf-8') as f:
                json.dump(self.dictionnaire_luxembourgeois, f, ensure_ascii=False, indent=2)
            print(f"   ‚úÖ Dictionnaire sauv√©: {dict_file}")
            
            # Sauvegarde des n-grammes dans assets
            ngrams_file = os.path.join(assets_dir, "luxemburgish_ngrams.json")
            with open(ngrams_file, 'w', encoding='utf-8') as f:
                json.dump(self.ngrams_luxembourgeois, f, ensure_ascii=False, indent=2)
            print(f"   ‚úÖ N-grammes sauv√©s: {ngrams_file}")
            
            # Sauvegarde de backup locale √©galement
            backup_dict = "luxemburgish_dict_backup.json"
            backup_ngrams = "luxemburgish_ngrams_backup.json"
            
            with open(backup_dict, 'w', encoding='utf-8') as f:
                json.dump(self.dictionnaire_luxembourgeois, f, ensure_ascii=False, indent=2)
            print(f"   üìã Backup dictionnaire: {backup_dict}")
            
            with open(backup_ngrams, 'w', encoding='utf-8') as f:
                json.dump(self.ngrams_luxembourgeois, f, ensure_ascii=False, indent=2)
            print(f"   üìã Backup n-grammes: {backup_ngrams}")
            
            # Rapport final
            print(f"\nüìà RAPPORT FINAL")
            print(f"   - Transcriptions trait√©es: {len(self.textes_luxembourgeois)}")
            print(f"   - Mots dans le dictionnaire: {len(self.dictionnaire_luxembourgeois)}")
            print(f"   - N-grammes g√©n√©r√©s: {len(self.ngrams_luxembourgeois)}")
            print(f"   - Fichiers Android: {assets_dir}")
            print(f"   - Fichiers backup: r√©pertoire courant")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur de sauvegarde: {e}")
            return False
    
    def executer_pipeline_rapide(self):
        """Ex√©cute le pipeline complet en mode ultra-rapide."""
        print("\nüöÄ PIPELINE ULTRA-RAPIDE LUXEMBOURGEOIS")
        print("=" * 50)
        
        etapes = [
            ("Chargement transcriptions", self.charger_textes_luxembourgeois),
            ("Extraction mots", self.extraire_mots_luxembourgeois),
            ("G√©n√©ration n-grammes", self.generer_ngrams_luxembourgeois),
            ("Sauvegarde", self.sauvegarder_donnees)
        ]
        
        for i, (nom, fonction) in enumerate(etapes, 1):
            print(f"\n‚è≥ √âtape {i}/{len(etapes)}: {nom}")
            start_time = time.time()
            
            if not fonction():
                print(f"‚ùå √âCHEC √† l'√©tape: {nom}")
                return False
            
            elapsed = time.time() - start_time
            print(f"   ‚è±Ô∏è Termin√© en {elapsed:.2f}s")
        
        print(f"\nüéâ PIPELINE ULTRA-RAPIDE TERMIN√â AVEC SUCC√àS !")
        return True

def main():
    """Fonction principale d'ex√©cution."""
    
    # Configuration de l'environnement
    load_dotenv()
    
    print("üîß INITIALISATION")
    print("-" * 30)
    
    # V√©rifier le token Hugging Face
    if os.getenv('HUGGINGFACE_TOKEN'):
        print("üîë Token Hugging Face configur√©")
    else:
        print("‚ö†Ô∏è Token Hugging Face non configur√© (optionnel)")
    
    # Cr√©er et ex√©cuter le pipeline
    pipeline = LuxembourgishKeyboardPipelineRapide()
    
    start_total = time.time()
    succes = pipeline.executer_pipeline_rapide()
    elapsed_total = time.time() - start_total
    
    print(f"\n{'='*70}")
    if succes:
        print("üéä SUCC√àS COMPLET DU PIPELINE ULTRA-RAPIDE!")
        print(f"‚è±Ô∏è Temps total d'ex√©cution: {elapsed_total:.2f} secondes")
        print("üéØ Fichiers g√©n√©r√©s:")
        print("   - luxemburgish_dict_rapide.json")
        print("   - luxemburgish_ngrams_rapide.json")
    else:
        print("‚ùå √âCHEC DU PIPELINE")
        print("V√©rifiez les logs ci-dessus pour plus de d√©tails")
    
    print("=" * 70)
    return succes

if __name__ == "__main__":
    main()